#include <stdio.h>
#include <stdlib.h>

#define WHITE 0  // Unvisited
#define GREY 1   // Explore incomplete
#define BLACK 2  // Fully explored 

// Function for depth-first search
int dfs(int node, int** graph, int* visited, int numCourses) {
    visited[node] = GREY;
    
    // Go through all parent nodes (prerequisite courses)
    for (int j = 0; j < numCourses; j++) {
        if (graph[node][j] == 1) {
            // If we end up in an already being explored node, it is a cycle
            if (visited[j] == GREY) {
                return 0;  // Cycle detected
            }
            
            // Explore unvisited node
            if (visited[j] == WHITE) {
                if (!dfs(j, graph, visited, numCourses)) {
                    return 0;  // Cycle detected
                }
            }
        }
    }

    visited[node] = BLACK;
    return 1;  // No cycle detected
}

// Function to check if it is possible to finish all courses
int canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize) {
    // Create graph as adjacency matrix
    int** graph = (int**)malloc(numCourses * sizeof(int*));
    for (int i = 0; i < numCourses; i++) {
        graph[i] = (int*)malloc(numCourses * sizeof(int));
        for (int j = 0; j < numCourses; j++) {
            graph[i][j] = 0;  // Initialize the graph with 0
        }
    }
    
    // Populate graph from prerequisites
    for (int i = 0; i < prerequisitesSize; i++) {
        graph[prerequisites[i][0]][prerequisites[i][1]] = 1;
    }

    // Visited array to track the state of each node (course)
    int* visited = (int*)malloc(numCourses * sizeof(int));
    for (int i = 0; i < numCourses; i++) {
        visited[i] = WHITE;  // Initialize all nodes as unvisited
    }
    
    // Run DFS for each unvisited course
    for (int i = 0; i < numCourses; i++) {
        if (visited[i] == WHITE) {
            if (!dfs(i, graph, visited, numCourses)) {
                // If a cycle is detected, return false
                free(visited);
                for (int j = 0; j < numCourses; j++) {
                    free(graph[j]);
                }
                free(graph);
                return 0;
            }
        }
    }
    
    // No cycle detected, return true
    free(visited);
    for (int j = 0; j < numCourses; j++) {
        free(graph[j]);
    }
    free(graph);
    
    return 1;
}

/*
int main() {
    int numCourses = 4;
    int prerequisites[4][2] = {{1, 0}, {2, 0}, {3, 1}, {3, 2}};
    int prerequisitesSize = 4;
    int prerequisitesColSize = 2;

    int** prerequisitesArr = (int**)malloc(prerequisitesSize * sizeof(int*));
    for (int i = 0; i < prerequisitesSize; i++) {
        prerequisitesArr[i] = (int*)malloc(2 * sizeof(int));
        for (int j = 0; j < 2; j++) {
            prerequisitesArr[i][j] = prerequisites[i][j];
        }
    }

    if (canFinish(numCourses, prerequisitesArr, prerequisitesSize, &prerequisitesColSize)) {
        printf("It is possible to finish all courses.\n");
    } else {
        printf("It is not possible to finish all courses.\n");
    }

    // Free allocated memory for prerequisitesArr
    for (int i = 0; i < prerequisitesSize; i++) {
        free(prerequisitesArr[i]);
    }
    free(prerequisitesArr);

    return 0;
}*/
