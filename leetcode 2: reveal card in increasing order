/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

#include <stdio.h>
#include <stdlib.h>

void sort(int* arr, int n) {
    // Simple bubble sort (or you can use qsort, but here it's for simplicity)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int* deckRevealedIncreasing(int* deck, int n, int* returnSize) {
    *returnSize = n;
    int* ans = (int*)malloc(n * sizeof(int));
    sort(deck, n);

    for (int i = n - 1; i >= 0; i--) {
        if (i == n - 1 || i == n - 2) {
            ans[i] = deck[i];
        } else {
            ans[i] = deck[i];
            int temp = ans[n - 1];
            for (int j = n - 2; j >= i + 1; j--) {
                ans[j + 1] = ans[j];
            }
            ans[i + 1] = temp;
        }
    }
    
    return ans;
}

/*int main() {
    int deck[] = {17, 13, 11, 2, 3, 5, 7};
    int n = sizeof(deck) / sizeof(deck[0]);
    int returnSize;
    
    int* result = deckRevealedIncreasing(deck, n, &returnSize);
    
    for (int i = 0; i < returnSize; i++) {
        printf("%d ", result[i]);
    }
    printf("\n");
    
    free(result);
    return 0;
}*/
